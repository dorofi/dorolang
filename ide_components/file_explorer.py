import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
import os
from pathlib import Path
import shutil
import functools

def refresh_on_success(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏."""
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        result = func(self, *args, **kwargs)
        if result:  # –û–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π
            self.refresh_tree()
    return wrapper
class FileExplorer:
    """–ü–∞–Ω–µ–ª—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    def __init__(self, parent, ide_instance, doro_icon=None):
        self.parent = parent
        self.ide = ide_instance
        self.doro_icon = doro_icon
        self.frame = ttk.Frame(parent, style="Explorer.TFrame")
        
        self.tree = ttk.Treeview(self.frame, show='tree')
        self.vsb = ttk.Scrollbar(self.frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=self.vsb.set)

        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.vsb.pack(side=tk.RIGHT, fill=tk.Y)

        self.tree.bind("<Double-1>", self.on_double_click)
        
        self.path_map = {}
        self.root_path = None
        self.selected_item_id = None

        self.create_context_menu()

    def populate_tree(self, path):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–∞–º–∏ –∏ –ø–∞–ø–∫–∞–º–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏"""
        for i in self.tree.get_children():
            self.tree.delete(i)
        self.path_map.clear()
        
        self.root_path = path
        root_node = self.tree.insert("", 'end', text=f"üóÇÔ∏è {os.path.basename(path)}", open=True)
        self.path_map[root_node] = path
        self.process_directory(root_node, path)

    def process_directory(self, parent_id, path):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è pathlib"""
        try:
            for p in sorted(Path(path).iterdir()):
                abs_path = str(p)
                is_dir = p.is_dir()

                if is_dir:
                    node_text = f"üìÅ {p}"
                    node_image = ""  # –£ –ø–∞–ø–æ–∫ –Ω–µ—Ç –∏–∫–æ–Ω–∫–∏
                else:
                    node_text = f"üìÑ {p}"
                    node_image = ""  # –ò–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤
                    if p.suffix == '.doro' and self.doro_icon:
                        node_text = f" {p.name}"  # –ü—Ä–æ–±–µ–ª –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç –∏–∫–æ–Ω–∫–∏
                        node_image = self.doro_icon

                node_id = self.tree.insert(parent_id, 'end', text=node_text, image=node_image, open=False)

                self.path_map[node_id] = abs_path
                
                if is_dir:
                    self.process_directory(node_id, abs_path)
        except PermissionError:
            self.tree.insert(parent_id, 'end', text="üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {path}: {e}")

    def on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"""
        try:
            item_id = self.tree.identify_row(event.y)
            if item_id:
                path = self.path_map.get(item_id)
                if path and Path(path).is_file():
                    self.ide.open_file_from_path(path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞: {e}")

    def create_context_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        self.context_menu = tk.Menu(self.tree, tearoff=0)
        self.context_menu.add_command(label="–ù–æ–≤—ã–π —Ñ–∞–π–ª...", command=self.new_file)
        self.context_menu.add_command(label="–ù–æ–≤–∞—è –ø–∞–ø–∫–∞...", command=self.new_folder)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å...", command=self.rename_item)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self.delete_item)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="–û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_tree)
        
        self.tree.bind("<Button-3>", self.show_context_menu)

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–∞–≤–æ–º –∫–ª–∏–∫–µ"""
        item_id = self.tree.identify_row(event.y)
        if item_id:
            self.tree.selection_set(item_id)
            self.selected_item_id = item_id
            is_root = self.tree.parent(item_id) == ""
            self.context_menu.entryconfig("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å...", state="disabled" if is_root else "normal")
            self.context_menu.entryconfig("–£–¥–∞–ª–∏—Ç—å", state="disabled" if is_root else "normal")
            self.context_menu.post(event.x_root, event.y_root)

    def get_selected_path(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        if not self.selected_item_id: return self.root_path
        path = Path(self.path_map.get(self.selected_item_id))
        return path if path.is_dir() else path.parent

    @refresh_on_success
    def new_file(self):
        target_dir = self.get_selected_path()
        if not target_dir: return False
        file_name = simpledialog.askstring("–ù–æ–≤—ã–π —Ñ–∞–π–ª", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞:", parent=self.ide)
        if file_name:
            try:
                new_path = Path(target_dir) / file_name
                if new_path.exists():
                    messagebox.showwarning("–û—à–∏–±–∫–∞", "–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parent=self.ide)
                    return False
                else:
                    new_path.touch() # –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
                    self.ide.open_file_from_path(new_path)
                    return True
            except OSError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {e}", parent=self.ide)
        return False

    @refresh_on_success
    def new_folder(self):
        target_dir = self.get_selected_path()
        if not target_dir: return False
        folder_name = simpledialog.askstring("–ù–æ–≤–∞—è –ø–∞–ø–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:", parent=self.ide)
        if folder_name:
            try:
                (Path(target_dir) / folder_name).mkdir(exist_ok=False)
                return True
            except FileExistsError:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parent=self.ide)
            except OSError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}", parent=self.ide)
        return False

    @refresh_on_success
    def delete_item(self):
        path_str = self.path_map.get(self.selected_item_id)
        if not path_str: return False
        path_to_delete = Path(path_str)
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å '{path_to_delete.name}'?", parent=self.ide):
            try:
                if path_to_delete.is_file():
                    path_to_delete.unlink()
                elif path_to_delete.is_dir():
                    shutil.rmtree(path_to_delete)
                return True
            except OSError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}", parent=self.ide)
        return False

    @refresh_on_success
    def rename_item(self):
        old_path_str = self.path_map.get(self.selected_item_id)
        if not old_path_str: return False
        old_path = Path(old_path_str)
        old_name = old_path.name
        new_name = simpledialog.askstring("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:", initialvalue=old_name, parent=self.ide)
        if new_name and new_name != old_name:
            try:
                old_path.rename(old_path.with_name(new_name))
                return True
            except OSError as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: {e}", parent=self.ide)
        return False

    def refresh_tree(self):
        if self.root_path and Path(self.root_path).is_dir():
            self.populate_tree(self.root_path)
