#!/usr/bin/env python3
"""
DoroLang IDE - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å

–ê–≤—Ç–æ—Ä: Dorofii Karnaukh
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, font, simpledialog
import shutil
import tkinter.scrolledtext as scrolledtext
import os
import sys
import threading
import io
import re
import json
import traceback

from ide_settings import THEMES
from ide_utils import (
    MockInterpreter,
    Lexer, LexerError, Parser, ParseError, Interpreter, DoroRuntimeError,
    DOROLANG_MODULES_OK
)
from ide_components import (
    CodeEditor,
    Console,
    FileExplorer,
    TemplateManager,
    FindReplaceDialog
)

class DoroLangIDE(tk.Tk):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π IDE –¥–ª—è DoroLang"""
    
    def __init__(self):
        super().__init__()
        try:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced DoroLang IDE...")

            self.title("DoroLang IDE")
            self.geometry("1400x900")
            self.minsize(900, 700)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π DoroLang
            # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–æ–∫
            # –°–µ—Ä–∞—è –∏–∫–æ–Ω–∫–∞ 'x' –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.img_close = tk.PhotoImage("img_close", data='''R0lGODlhCAAIAPABAJmZmf///yH5BAEAAAEALAAAAAAIAAgAAAIMBIKpqgYhADs=''')
            # –ö—Ä–∞—Å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ 'x' –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–≤–µ–¥–µ–Ω–∏–µ/–Ω–∞–∂–∞—Ç–∏–µ)
            self.img_close_active = tk.PhotoImage("img_close_active", data='''R0lGODlhCAAIAPABAO3t7f///yH5BAEAAAEALAAAAAAIAAgAAAIMBIKpqgYhADs=''')

            # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ .doro
            self.doro_icon = tk.PhotoImage("doro_icon", data='''
                R0lGODlhEAAQAPIAAAAAAP//AP8AAP/9/f//mf//Zv//M///AP/M/wAAAAAAACH5BAEAAAcALAAAAAAQABAAAANKeLrc/jDKSau9OOvNu/9gKI5kaZ5oqq5s675wLM90bd94ru987//AoHBILBqPyKRyyWw6n9CodEqtWq/YrHbL7Xq/4LB4TC6bz+i0es1uu9/wuHxOr9vv+Lx+z+/7/4CBgoOEhYaHiImKi4yNjo+AgZIAAAA7
            ''')
            if DOROLANG_MODULES_OK and Interpreter:
                self.dorolang_interpreter = Interpreter()
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä DoroLang")
            else:
                self.dorolang_interpreter = MockInterpreter()
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º (–º–æ–¥—É–ª–∏ DoroLang –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_theme = 'light' # –¢–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.last_opened_folder = None
            self.notebook = None
            self.find_window = None
            self.editors = {}
            self.recent_files = []
            self.load_settings()
            self.theme_var = tk.StringVar(value=self.current_theme)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
            self.setup_style()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            print("–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            self.setup_main_area()
            self.setup_menu()
            self.setup_toolbar()
            self.setup_statusbar()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ç–µ–º—É
            self.apply_theme()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—É—é –ø–∞–ø–∫—É
            if self.last_opened_folder and os.path.isdir(self.last_opened_folder):
                self.file_explorer.populate_tree(self.last_opened_folder)
            
            # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
            self.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.bind_shortcuts()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —à–∞–±–ª–æ–Ω–æ–º
            self._create_new_tab(is_template=True)
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if DOROLANG_MODULES_OK:
                self.console.write_info("Enhanced DoroLang IDE –∑–∞–ø—É—â–µ–Ω–∞!")
                self.console.write_info("–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, —É—Å–ª–æ–≤–∏—è")
                self.console.write_info("–ù–∞–∂–º–∏—Ç–µ F5 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞, Ctrl+Space –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
            else:
                self.console.write_warning("IDE –∑–∞–ø—É—â–µ–Ω–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")
                self.console.write_warning("–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ lexer.py, parser.py, interpreter.py –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É.")
            
            print("‚úÖ Enhanced DoroLang IDE —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            traceback.print_exc()
            raise
    
    def bind_shortcuts(self):
        """–ü—Ä–∏–≤—è–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        try:
            self.bind('<Control-n>', lambda e: self.new_file())
            self.bind('<Control-o>', lambda e: self.open_file())
            self.bind('<Control-s>', lambda e: self.save_file())
            self.bind('<Control-Shift-S>', lambda e: self.save_as_file())
            self.bind('<F5>', lambda e: self.run_code())
            self.bind('<F9>', lambda e: self.run_selection())
            self.bind('<Control-t>', lambda e: self.show_template_dialog())
            self.bind('<Control-slash>', lambda e: self.toggle_comment())
            self.bind('<Control-f>', lambda e: self.show_find_dialog(False))
            self.bind('<Control-h>', lambda e: self.show_find_dialog(True))
            self.bind('<Control-g>', lambda e: self.go_to_line())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à: {e}")
    
    def setup_style(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        try:
            style = ttk.Style()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—Ä–æ—à–æ –ø–æ–¥–¥–∞–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            available_themes = style.theme_names()
            if 'clam' in available_themes:
                style.theme_use('clam')
            elif 'alt' in available_themes:
                style.theme_use('alt')
            elif available_themes:
                style.theme_use(available_themes[0])

            style.element_create("close", "image", self.img_close,
                ("active", "pressed", "!disabled", self.img_close_active),
                ("active", "!disabled", self.img_close_active),
                border=8, sticky='e')

            style.layout("TNotebook.Tab", [
                ("Notebook.tab", {
                    "sticky": "nswe",
                    "children": [
                        ("Notebook.padding", {
                            "side": "top", "sticky": "nswe",
                            "children": [
                                ("Notebook.focus", {
                                    "side": "top", "sticky": "nswe",
                                    "children": [
                                        ("Notebook.label", {"side": "left", "sticky": ''}),
                                        ("close", {"side": "left", "sticky": ''}),
                                    ]
                                })
                            ]
                        })
                    ]
                })
            ])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π: {e}")
    
    def setup_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            menubar = tk.Menu(self)
            self.config(menu=menubar)
            
            # –§–∞–π–ª
            file_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="üìÅ –§–∞–π–ª", menu=file_menu)
            file_menu.add_command(label="–ù–æ–≤—ã–π —Ñ–∞–π–ª (Ctrl+N)", command=self.new_file)
            file_menu.add_command(label="–ò–∑ —à–∞–±–ª–æ–Ω–∞ (Ctrl+T)", command=self.show_template_dialog)
            file_menu.add_separator()
            file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É...", command=self.open_folder)
            file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª (Ctrl+O)", command=self.open_file)
            file_menu.add_separator()
            file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å (Ctrl+S)", command=self.save_file)
            file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ (Ctrl+Shift+S)", command=self.save_as_file)
            file_menu.add_separator()
            file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.on_closing)
            
            # –ü—Ä–∞–≤–∫–∞
            edit_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="‚úèÔ∏è –ü—Ä–∞–≤–∫–∞", menu=edit_menu)
            edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)", command=self.undo)
            edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y)", command=self.redo)
            edit_menu.add_separator()
            edit_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å (Ctrl+X)", command=self.cut)
            edit_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (Ctrl+C)", command=self.copy)
            edit_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å (Ctrl+V)", command=self.paste)
            edit_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ (Ctrl+A)", command=self.select_all)
            edit_menu.add_separator()
            edit_menu.add_command(label="–ù–∞–π—Ç–∏... (Ctrl+F)", command=lambda: self.show_find_dialog(False))
            edit_menu.add_command(label="–ó–∞–º–µ–Ω–∏—Ç—å... (Ctrl+H)", command=lambda: self.show_find_dialog(True))
            edit_menu.add_command(label="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ... (Ctrl+G)", command=self.go_to_line)
            edit_menu.add_separator()
            edit_menu.add_command(label="–ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å (Ctrl+/)", command=self.toggle_comment)
            edit_menu.add_command(label="–ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Ctrl+Space)", command=self.show_autocomplete)
            
            # –ó–∞–ø—É—Å–∫
            run_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫", menu=run_menu)
            run_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥ (F5)", command=self.run_code)
            run_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ (F9)", command=self.run_selection)
            run_menu.add_separator()
            run_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å", command=self.clear_console)
            run_menu.add_command(label="–°–±—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", command=self.reset_interpreter)
            
            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            tools_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
            tools_menu.add_command(label="–®–∞–±–ª–æ–Ω—ã –∫–æ–¥–∞", command=self.show_template_dialog)
            tools_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", command=self.check_syntax)
            tools_menu.add_separator()
            tools_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.show_settings)
            
            # –í–∏–¥
            view_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="üé® –í–∏–¥", menu=view_menu)

            theme_menu = tk.Menu(view_menu, tearoff=0)
            view_menu.add_cascade(label="–¢–µ–º—ã", menu=theme_menu)
            theme_menu.add_radiobutton(label="–°–≤–µ—Ç–ª–∞—è", variable=self.theme_var, value="light", command=self.switch_theme)
            theme_menu.add_radiobutton(label="–¢–µ–º–Ω–∞—è", variable=self.theme_var, value="dark", command=self.switch_theme)
            
            # –°–ø—Ä–∞–≤–∫–∞
            help_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="‚ùì –°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
            help_menu.add_command(label="–°–∏–Ω—Ç–∞–∫—Å–∏—Å DoroLang", command=self.show_syntax_help)
            help_menu.add_command(label="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", command=self.show_shortcuts)
            help_menu.add_separator()
            help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é: {e}")
    
    def setup_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            self.toolbar = ttk.Frame(self, style='Toolbar.TFrame')
            toolbar = self.toolbar
            self.toolbar.pack(side=tk.TOP, fill=tk.X, padx=2, pady=2)
            
            # –ö–Ω–æ–ø–∫–∏ —Ñ–∞–π–ª–æ–≤
            ttk.Button(toolbar, text="üìÑ –ù–æ–≤—ã–π", command=self.new_file, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            ttk.Button(toolbar, text="üìã –®–∞–±–ª–æ–Ω", command=self.show_template_dialog, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            ttk.Button(toolbar, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å", command=self.open_file, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            ttk.Button(toolbar, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_file, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            
            ttk.Separator(toolbar, orient=tk.VERTICAL, style='Toolbar.TSeparator').pack(side=tk.LEFT, fill=tk.Y, padx=5)
            
            # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞
            ttk.Button(toolbar, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å (F5)", command=self.run_code, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            ttk.Button(toolbar, text="üîÑ –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ (F9)", command=self.run_selection, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            ttk.Button(toolbar, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_console, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            
            ttk.Separator(toolbar, orient=tk.VERTICAL, style='Toolbar.TSeparator').pack(side=tk.LEFT, fill=tk.Y, padx=5)
            
            # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            ttk.Button(toolbar, text="‚úîÔ∏è –°–∏–Ω—Ç–∞–∫—Å–∏—Å", command=self.check_syntax, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            ttk.Button(toolbar, text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", command=self.toggle_comment, style='Toolbar.TButton').pack(side=tk.LEFT, padx=2)
            
            ttk.Separator(toolbar, orient=tk.VERTICAL, style='Toolbar.TSeparator').pack(side=tk.LEFT, fill=tk.Y, padx=5)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.line_col_label = ttk.Label(toolbar, text="–°—Ç—Ä–æ–∫–∞: 1, –°—Ç–æ–ª–±–µ—Ü: 1", style='Toolbar.TLabel')
            self.line_col_label.pack(side=tk.RIGHT, padx=5)
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞
            mode_text = "Full Mode" if DOROLANG_MODULES_OK else "Demo Mode"
            self.mode_label = ttk.Label(toolbar, text=f"[{mode_text}]", font=("Arial", 8), style='Toolbar.TLabel')
            self.mode_label.pack(side=tk.RIGHT, padx=10)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    def setup_main_area(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏"""
        try:
            # –ì–ª–∞–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            main_paned_window = ttk.PanedWindow(self, orient=tk.HORIZONTAL)
            main_paned_window.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

            # 1. –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ (—Å–ª–µ–≤–∞)
            self.file_explorer = FileExplorer(main_paned_window, self, doro_icon=self.doro_icon)
            main_paned_window.add(self.file_explorer.frame, weight=1)

            # 2. –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ä–µ–¥–∞–∫—Ç–æ—Ä + –∫–æ–Ω—Å–æ–ª—å)
            right_pane = ttk.Frame(main_paned_window)
            main_paned_window.add(right_pane, weight=4)

            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏ –∫–æ–Ω—Å–æ–ª–∏
            editor_console_pane = ttk.PanedWindow(right_pane, orient=tk.VERTICAL)
            editor_console_pane.pack(fill=tk.BOTH, expand=True)
            
            # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
            self.notebook = ttk.Notebook(editor_console_pane, style='TNotebook')
            self.notebook.bind("<<NotebookTabChanged>>", self.on_tab_changed)
            self.notebook.bind("<ButtonPress-1>", self.on_tab_close_press)
            editor_console_pane.add(self.notebook, weight=3)
            
            # –ö–æ–Ω—Å–æ–ª—å
            self.console = Console(self)
            editor_console_pane.add(self.console.frame, weight=1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏: {e}")
            traceback.print_exc()
            raise
    
    def setup_statusbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            self.statusbar = ttk.Frame(self, style='Statusbar.TFrame')
            self.statusbar.pack(side=tk.BOTTOM, fill=tk.X)
            
            self.status_label = ttk.Label(self.statusbar, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", style='Statusbar.TLabel')
            self.status_label.pack(side=tk.LEFT, padx=5)
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.modified_label = ttk.Label(self.statusbar, text="", style='Statusbar.TLabel')
            self.modified_label.pack(side=tk.RIGHT, padx=5)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    def apply_welcome_template(self, editor):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É"""
        welcome_template = '''# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DoroLang!
# –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è, –ª–æ–≥–∏–∫–∞, —É—Å–ª–æ–≤–∏—è

say "–ü—Ä–∏–≤–µ—Ç, DoroLang!"

# –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
kas name = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
kas is_learning = true

if (is_learning) {
    say name + " –∏–∑—É—á–∞–µ—Ç DoroLang!"
} else {
    say name + " —É–∂–µ –∑–Ω–∞–µ—Ç DoroLang"
}
'''
        editor.set_text(welcome_template)
    
    def show_template_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞"""
        try:
            templates = TemplateManager.get_templates()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
            dialog = tk.Toplevel(self)
            dialog.title("–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∫–æ–¥–∞")
            dialog.geometry("400x300")
            dialog.transient(self)
            dialog.grab_set()
            
            # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
            listbox = tk.Listbox(dialog, font=("Arial", 10))
            listbox.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            for template_name in templates.keys():
                listbox.insert(tk.END, template_name)
            
            # –ö–Ω–æ–ø–∫–∏
            button_frame = ttk.Frame(dialog)
            button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
            
            def apply_template():
                selection = listbox.curselection()
                if selection:
                    template_name = listbox.get(selection[0])
                    editor = self.get_current_editor()
                    if editor:
                        editor.set_text(templates[template_name])
                        editor.is_modified = True
                        dialog.destroy()
            
            ttk.Button(button_frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_template).pack(side=tk.LEFT)
            ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", command=dialog.destroy).pack(side=tk.RIGHT)
            
            # –ê–≤—Ç–æ–≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if templates:
                listbox.selection_set(0)
                listbox.bind('<Double-Button-1>', lambda e: apply_template())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
    
    def toggle_comment(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
        try:
            editor = self.get_current_editor()
            if not editor: return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            try:
                start_idx = editor.text_area.index(tk.SEL_FIRST)
                end_idx = editor.text_area.index(tk.SEL_LAST)
            except tk.TclError:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
                current_line = editor.text_area.index(tk.INSERT).split('.')[0]
                start_idx = f"{current_line}.0"
                end_idx = f"{current_line}.end"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
            text = editor.text_area.get(start_idx, end_idx)
            lines = text.split('\n')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            all_commented = all(line.strip().startswith('#') or line.strip() == '' for line in lines)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            new_lines = []
            for line in lines:
                if all_commented:
                    # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    if line.strip().startswith('#'):
                        # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π # –∏ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –Ω–µ–≥–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                        new_line = line.replace('#', '', 1)
                        if new_line.startswith(' '):
                            new_line = new_line[1:]
                        new_lines.append(new_line)
                    else:
                        new_lines.append(line)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    if line.strip():  # –ù–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        new_lines.append('# ' + line)
                    else:
                        new_lines.append(line)
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            editor.text_area.delete(start_idx, end_idx)
            editor.text_area.insert(start_idx, '\n'.join(new_lines))
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
    
    def check_syntax(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            if not DOROLANG_MODULES_OK:
                self.console.write_warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ")
                return
            
            editor = self.get_current_editor()
            if not editor: return

            code = editor.get_text().strip()
            if not code:
                self.console.write_warning("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!")
                return
            
            self.console.write_info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞...")
            
            try:
                # –¢–æ–ª—å–∫–æ –ª–µ–∫—Å–µ—Ä –∏ –ø–∞—Ä—Å–µ—Ä
                lexer = Lexer(code)
                tokens = lexer.tokenize()
                
                parser = Parser(tokens)
                ast = parser.parse()
                
                self.console.write_success(f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(ast.statements)} —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
                
            except LexerError as e:
                self.console.write_error(f"–û—à–∏–±–∫–∞ –ª–µ–∫—Å–µ—Ä–∞: {e}")
            except ParseError as e:
                self.console.write_error(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            except Exception as e:
                self.console.write_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
            self.console.write_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def show_syntax_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É DoroLang"""
        help_text = """DoroLang v1.2 - –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É

–û–°–ù–û–í–ù–´–ï –ö–û–ù–°–¢–†–£–ö–¶–ò–ò:
‚Ä¢ say "—Ç–µ–∫—Å—Ç"              - –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ kas –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è = –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

–¢–ò–ü–´ –î–ê–ù–ù–´–•:
‚Ä¢ –ß–∏—Å–ª–∞: 42, 3.14
‚Ä¢ –°—Ç—Ä–æ–∫–∏: "–ø—Ä–∏–≤–µ—Ç", '–º–∏—Ä'
‚Ä¢ –ë—É–ª–µ–≤—ã: true, false

–û–ü–ï–†–ê–¢–û–†–´:
‚Ä¢ –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ: +, -, *, /, %
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏—è: ==, !=, <, >, <=, >=
‚Ä¢ –õ–æ–≥–∏—á–µ—Å–∫–∏–µ: and, or, not

–£–°–õ–û–í–ù–´–ï –ö–û–ù–°–¢–†–£–ö–¶–ò–ò:
if (—É—Å–ª–æ–≤–∏–µ) {
    # –∫–æ–¥ –µ—Å–ª–∏ –∏—Å—Ç–∏–Ω–∞
} else {
    # –∫–æ–¥ –µ—Å–ª–∏ –ª–æ–∂—å
}

–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:
# –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

–ü–†–ò–ú–ï–†–´:
kas age = 25
if (age >= 18) {
    say "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π"
} else {
    say "–ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π"
}

kas result = (age > 20) and (age < 30)
say "–í–æ–∑—Ä–∞—Å—Ç –æ—Ç 20 –¥–æ 30: " + result
"""
        messagebox.showinfo("–°–∏–Ω—Ç–∞–∫—Å–∏—Å DoroLang", help_text)
    
    def show_shortcuts(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        shortcuts_text = """–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ DoroLang IDE

–§–ê–ô–õ–´:
Ctrl+N        - –ù–æ–≤—ã–π —Ñ–∞–π–ª
Ctrl+T        - –ù–æ–≤—ã–π –∏–∑ —à–∞–±–ª–æ–Ω–∞
Ctrl+O        - –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
Ctrl+S        - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
Ctrl+Shift+S  - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫

–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï:
Ctrl+Z        - –û—Ç–º–µ–Ω–∏—Ç—å
Ctrl+Y        - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
Ctrl+X        - –í—ã—Ä–µ–∑–∞—Ç—å
Ctrl+C        - –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
Ctrl+V        - –í—Å—Ç–∞–≤–∏—Ç—å
Ctrl+A        - –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ
Ctrl+/        - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
Ctrl+Space    - –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ

–í–´–ü–û–õ–ù–ï–ù–ò–ï:
F5            - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥
F9            - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ
"""
        messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", shortcuts_text)
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
    
    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            editor = self.get_current_editor()
            if editor:
                cursor_pos = editor.get_cursor_position()
                line, col = cursor_pos.split('.')
                self.line_col_label.config(text=f"–°—Ç—Ä–æ–∫–∞: {line}, –°—Ç–æ–ª–±–µ—Ü: {int(col) + 1}")
            else:
                self.line_col_label.config(text="")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def update_title(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞"""
        try:
            editor = self.get_current_editor()
            if editor:
                filename = os.path.basename(editor.current_file) if editor.current_file else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                modified_mark = " *" if editor.is_modified else ""
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏
                tab_id = self.notebook.select()
                self.notebook.tab(tab_id, text=f"{filename}{modified_mark} ") # –ü—Ä–æ–±–µ–ª –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç –∫—Ä–µ—Å—Ç–∏–∫–∞
            else:
                filename = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤"
                modified_mark = ""

            theme_name = self.current_theme.capitalize()
            self.title(f"DoroLang IDE ({theme_name}) - {filename}{modified_mark}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
    def new_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            self._create_new_tab()
            self.status_label.config(text="–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {e}")

    def open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        try:
            path = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞")
            if path:
                self.file_explorer.populate_tree(path)
                self.last_opened_folder = path
                self.status_label.config(text=f"–ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {os.path.basename(path)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

    def open_file_from_path(self, path):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ (–¥–ª—è –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ
            for tab_id, editor in self.editors.items():
                if editor.current_file == path:
                    self.notebook.select(tab_id)
                    return
            
            # –ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            self._create_new_tab(file_path=path)
            self.status_label.config(text=f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç: {os.path.basename(path)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
    
    def open_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            filename = filedialog.askopenfilename(
                title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª DoroLang",
                filetypes=[
                    ("DoroLang files", "*.doro"),
                    ("Text files", "*.txt"),
                    ("All files", "*.*")
                ]
            )
            
            if filename:
                self.open_file_from_path(filename)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")

    
    def save_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            editor = self.get_current_editor()
            if not editor: return False

            if editor.current_file:
                with open(editor.current_file, 'w', encoding='utf-8') as f:
                    f.write(editor.get_text())
                
                editor.is_modified = False
                self.update_title()
                self.status_label.config(text=f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(editor.current_file)}")
                return True
            else:
                return self.save_as_file()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            return False
    
    def save_as_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫..."""
        try:
            editor = self.get_current_editor()
            if not editor: return False

            filename = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª DoroLang",
                defaultextension=".doro",
                filetypes=[
                    ("DoroLang files", "*.doro"),
                    ("Text files", "*.txt"),
                    ("All files", "*.*")
                ]
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(editor.get_text())
                
                editor.current_file = filename
                editor.is_modified = False
                self.update_title()
                self.status_label.config(text=f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(filename)}")
                return True
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            return False
    
    def check_save_changes(self, editor_to_check):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        try:
            if editor_to_check and editor_to_check.is_modified:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, –æ –∫–∞–∫–æ–º —Ñ–∞–π–ª–µ –∏–¥–µ—Ç —Ä–µ—á—å
                for tab_id, editor in self.editors.items():
                    if editor == editor_to_check:
                        self.notebook.select(tab_id)
                        break

                filename = os.path.basename(editor_to_check.current_file) if editor_to_check.current_file else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                result = messagebox.askyesnocancel(
                    "–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                    f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ '{filename}'?"
                )
                if result is True:
                    return self.save_file()
                elif result is False:
                    return True
                else:  # Cancel
                    return False
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
            return True

    def show_find_dialog(self, replace_mode=False):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞/–∑–∞–º–µ–Ω—ã"""
        if self.find_window and self.find_window.winfo_exists():
            self.find_window.lift()
            return

        editor = self.get_current_editor()
        if not editor:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return

        self.find_window = FindReplaceDialog(self, editor, replace_mode)

    def go_to_line(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        editor = self.get_current_editor()
        if not editor:
            return

        try:
            line_count = int(editor.text_area.index(f"{tk.END}-1c").split('.')[0])
            line = simpledialog.askinteger("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ", 
                                           f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (1-{line_count}):",
                                           parent=self, minvalue=1, maxvalue=line_count)
            if line:
                target_pos = f"{line}.0"
                editor.text_area.mark_set(tk.INSERT, target_pos)
                editor.text_area.see(target_pos)
                editor.text_area.focus_set()
                
                line_end_pos = f"{line}.end"
                editor.text_area.tag_remove(tk.SEL, "1.0", tk.END)
                editor.text_area.tag_add(tk.SEL, target_pos, line_end_pos)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä–æ–∫–µ: {e}")
    
    def _proxy_editor_event(self, event_name):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–æ–±—ã—Ç–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ."""
        editor = self.get_current_editor()
        if editor:
            try:
                editor.text_area.event_generate(f'<<{event_name}>>')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏—è '{event_name}': {e}")

    # –ú–µ—Ç–æ–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def undo(self): self._proxy_editor_event('Undo')
    def redo(self): self._proxy_editor_event('Redo')
    def cut(self): self._proxy_editor_event('Cut')
    def copy(self): self._proxy_editor_event('Copy')
    def paste(self): self._proxy_editor_event('Paste')
    def select_all(self): self._proxy_editor_event('SelectAll')
    def show_autocomplete(self):
        editor = self.get_current_editor()
        if editor:
            editor.show_autocomplete()
    
    # –ú–µ—Ç–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    def run_code(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–≥–æ –∫–æ–¥–∞"""
        try:
            editor = self.get_current_editor()
            if not editor:
                self.console.write_warning("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
                return

            code = editor.get_text().strip()
            if not code:
                self.console.write_warning("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!")
                return
            
            self.console.clear()
            self.console.write_info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            if editor.is_modified and editor.current_file:
                self.save_file()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å GUI
            thread = threading.Thread(target=self._execute_code, args=(code,))
            thread.daemon = True
            thread.start()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–¥–∞: {e}")
            self.console.write_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
    
    def run_selection(self):
        """–ó–∞–ø—É—Å–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        try:
            editor = self.get_current_editor()
            if not editor:
                self.console.write_warning("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
                return

            selected_text = editor.text_area.get(tk.SEL_FIRST, tk.SEL_LAST)
            if selected_text.strip():
                self.console.clear()
                self.console.write_info("–ó–∞–ø—É—Å–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
                
                thread = threading.Thread(target=self._execute_code, args=(selected_text,))
                thread.daemon = True
                thread.start()
            else:
                self.console.write_warning("–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!")
        except tk.TclError:
            self.console.write_warning("–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è: {e}")
            self.console.write_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è: {e}")
    
    def _execute_code(self, code):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ DoroLang"""
        try:
            if not DOROLANG_MODULES_OK:
                # –î–µ–º–æ-—Ä–µ–∂–∏–º
                output = self.dorolang_interpreter.interpret(code)
                for line in output:
                    self.console.write(line + "\n", "warning")
                return
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ DoroLang
            lexer = Lexer(code)
            tokens = lexer.tokenize()
            
            parser = Parser(tokens)
            ast = parser.parse()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
            output = self.dorolang_interpreter.interpret(ast)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if output:
                for line in output:
                    if "‚ùå" in line:
                        self.console.write(line + "\n", "error")
                    else:
                        self.console.write(line + "\n", "output")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            variables = self.dorolang_interpreter.get_variables()
            if variables:
                self.console.write_info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏: {len(variables)}")
            
            self.console.write_success("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except Exception as e:
            if DOROLANG_MODULES_OK:
                if isinstance(e, LexerError):
                    self.console.write_error(f"–û—à–∏–±–∫–∞ –ª–µ–∫—Å–µ—Ä–∞: {e}")
                elif isinstance(e, ParseError):
                    self.console.write_error(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                elif isinstance(e, DoroRuntimeError):
                    self.console.write_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                else:
                    self.console.write_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            else:
                self.console.write_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
            traceback.print_exc()
    
    def clear_console(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª–∏"""
        try:
            self.console.clear()
            self.console.write_info("–ö–æ–Ω—Å–æ–ª—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏: {e}")
    
    def reset_interpreter(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        try:
            self.dorolang_interpreter.reset()
            self.console.write_info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞: {e}")
            self.console.write_error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {e}")
    
    def switch_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º—É IDE"""
        new_theme = self.theme_var.get()
        if new_theme != self.current_theme:
            self.current_theme = new_theme
            self.apply_theme()
            print(f"–¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞: {new_theme}")

    def get_current_editor(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä CodeEditor –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        try:
            if not self.notebook or not self.notebook.tabs():
                return None
            selected_tab_id = self.notebook.select()
            return self.editors.get(selected_tab_id)
        except (tk.TclError, KeyError):
            return None

    def _create_new_tab(self, file_path=None, is_template=False):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º"""
        try:
            editor_frame = ttk.Frame(self.notebook)
            editor = CodeEditor(editor_frame, THEMES[self.current_theme])
            editor.frame.pack(fill=tk.BOTH, expand=True)
            
            self.notebook.add(editor_frame, text="–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è *")
            tab_id = self.notebook.tabs()[-1]
            self.editors[tab_id] = editor
            self.notebook.select(tab_id)
            
            if file_path:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                editor.set_text(content)
                editor.current_file = file_path
                editor.is_modified = False
            elif is_template:
                self.apply_welcome_template(editor)
                editor.is_modified = False # –®–∞–±–ª–æ–Ω –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º

            self.update_title()
            return editor
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É: {e}")
            return None

    def on_tab_changed(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        self.update_title()
        self.update_status()

    def on_tab_close_press(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è."""
        try:
            element = self.notebook.identify(event.x, event.y)
            if "close" in element:
                index = self.notebook.index(f"@{event.x},{event.y}")
                tab_id_to_close = self.notebook.tabs()[index]
                editor_to_close = self.editors.get(tab_id_to_close)
                if self.check_save_changes(editor_to_close):
                    self.notebook.forget(tab_id_to_close)
                    if tab_id_to_close in self.editors:
                        del self.editors[tab_id_to_close]
                    self.update_title()
        except tk.TclError:
            pass # –ö–ª–∏–∫ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤–∫–ª–∞–¥–∫–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏: {e}")

    def apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º—É –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        try:
            colors = THEMES[self.current_theme]
            style = ttk.Style()

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π ttk
            style.configure('.', background=colors['bg'], foreground=colors['fg'], fieldbackground=colors['editor_bg'])
            style.configure('TFrame', background=colors['bg'])
            style.configure('TPanedWindow', background=colors['bg'])
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            style.configure('Toolbar.TFrame', background=colors['toolbar_bg'])
            style.configure('Toolbar.TButton', background=colors['button_bg'], foreground=colors['fg'])
            style.map('Toolbar.TButton', background=[('active', colors['button_active_bg'])])
            style.configure('Toolbar.TLabel', background=colors['toolbar_bg'], foreground=colors['fg'])
            style.configure('Toolbar.TSeparator', background=colors['toolbar_bg'])

            # –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            style.configure('Statusbar.TFrame', background=colors['bg'])
            style.configure('Statusbar.TLabel', background=colors['bg'], foreground=colors['fg'])

            # –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞
            style.configure("Explorer.TFrame", background=colors['bg'])
            style.configure("Treeview", 
                            background=colors['editor_bg'], 
                            foreground=colors['fg'],
                            fieldbackground=colors['editor_bg'],
                            rowheight=22)
            style.map('Treeview', 
                      background=[('selected', colors['select_bg'])],
                      foreground=[('selected', colors['editor_fg'])])
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
            style.configure('TNotebook', background=colors['bg']) # –§–æ–Ω –∑–∞ –≤–∫–ª–∞–¥–∫–∞–º–∏
            style.configure('TNotebook.Tab', 
                            background=colors['toolbar_bg'], 
                            foreground=colors['fg'], 
                            padding=[5, 2])
            style.map('TNotebook.Tab', 
                      background=[('selected', colors['editor_bg'])],
                      foreground=[('selected', colors['fg'])])
            # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ
            self.config(bg=colors['bg'])
            
            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.console.apply_theme(colors)
            for editor in self.editors.values():
                editor.apply_theme(colors)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã: {e}")
            traceback.print_exc()
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings_file = "dorolang_ide_settings.json"
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    self.recent_files = settings.get('recent_files', [])
                    self.current_theme = settings.get('theme', 'light')
                    self.last_opened_folder = settings.get('last_opened_folder', None)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self.recent_files = []
            self.last_opened_folder = None
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings_file = "dorolang_ide_settings.json"
            settings = {
                'recent_files': self.recent_files,
                'theme': self.current_theme,
                'last_opened_folder': self.last_opened_folder
            }
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def show_about(self):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            mode_info = "–ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º" if DOROLANG_MODULES_OK else "–î–µ–º–æ-—Ä–µ–∂–∏–º"
            about_text = f"""DoroLang IDE
–†–µ–∂–∏–º: {mode_info}

–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ 
–¥–ª—è —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è DoroLang

–ê–≤—Ç–æ—Ä: Dorofii Karnaukh
–ì–æ–¥: 2024-2025

–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
‚úÖ –†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤–æ –≤–∫–ª–∞–¥–∫–∞—Ö
‚úÖ –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (—Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
‚úÖ –°–≤–µ—Ç–ª–∞—è –∏ —Ç–µ–º–Ω–∞—è —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞

DoroLang - –ø—Ä–æ—Å—Ç–æ–π –∏ –º–æ—â–Ω—ã–π —è–∑—ã–∫ 
–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!"""
            
            messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ: {e}")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏
            for editor in list(self.editors.values()):
                if not self.check_save_changes(editor):
                    return # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–º–µ–Ω–∞"
            self.save_settings()
            self.destroy()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            self.destroy()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ IDE"""
        try:
            print("–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self.mainloop()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            traceback.print_exc()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Enhanced DoroLang IDE"""
    
    print("=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö DOROLANG IDE")
    print("=" * 60)
    
    try:
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
        print(f"–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
        print(f"–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ: {os.listdir('.')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ tkinter
        try:
            import tkinter
            print("‚úÖ Tkinter –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError as e:
            print(f"‚ùå Tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º IDE
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Enhanced IDE...")
        ide = DoroLangIDE()
        
        print("Enhanced IDE —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–ø—É—Å–∫...")
        ide.run()
        
        print("Enhanced IDE –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("\n–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            import tkinter.messagebox as mb
            error_details = f"""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Enhanced IDE:

–û—à–∏–±–∫–∞: {str(e)}

–î–µ—Ç–∞–ª–∏:
- Python: {sys.version}
- –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}
- –ú–æ–¥—É–ª–∏ DoroLang: {'‚úÖ OK' if DOROLANG_MODULES_OK else '‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –í—Å–µ –ª–∏ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ?
2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏?
3. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π

–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
            
            mb.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Enhanced DoroLang IDE", error_details)
        except:
            pass  # –ï—Å–ª–∏ –¥–∞–∂–µ messagebox –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        
        print(f"\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã lexer.py, parser.py, interpreter.py –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")  
        print("3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: python dorolang_ide.py")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é Python (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.6+)")
        
        return 1


if __name__ == "__main__":
    sys.exit(main())