#!/usr/bin/env python3
"""
DoroLang - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —è–∑—ã–∫–∞ DoroLang

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py                    # –ü—Ä–∏–º–µ—Ä—ã
    python main.py interactive        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    python main.py examples           # –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã
    python main.py test              # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    python main.py program.doro       # –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞

–ê–≤—Ç–æ—Ä: Dorofii Karnaukh
"""

import sys
import os
from typing import List, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from lexer import Lexer, LexerError
from parser import Parser, ParseError
from interpreter import Interpreter, RuntimeError as DoroRuntimeError


class DoroLang:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ DoroLang
    
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ª–µ–∫—Å–µ—Ä–∞, –ø–∞—Ä—Å–µ—Ä–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞
    """
    
    def __init__(self):
        self.lexer: Optional[Lexer] = None
        self.parser: Optional[Parser] = None
        self.interpreter = Interpreter()
        self.version = "1.0.0"
    
    def run(self, source_code: str, show_details: bool = False) -> List[str]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –Ω–∞ DoroLang
        
        Args:
            source_code: –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            show_details: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            List[str]: –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        """
        try:
            # –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            if show_details:
                print("üîç Lexical Analysis...")
            
            self.lexer = Lexer(source_code)
            tokens = self.lexer.tokenize()
            
            if show_details:
                print(f"   Found {len(tokens)} tokens")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤
                for i, token in enumerate(tokens[:5]):
                    if token.type.name != 'EOF':
                        print(f"     {i}: {token.type.name} '{token.value}'")
                if len(tokens) > 6:
                    print(f"     ... –∏ –µ—â–µ {len(tokens) - 5} —Ç–æ–∫–µ–Ω–æ–≤")
            
            # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            if show_details:
                print("üå≥ Parsing...")
            
            self.parser = Parser(tokens)
            ast = self.parser.parse()
            
            if show_details:
                print(f"   Built AST with {len(ast.statements)} statements")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
            if show_details:
                print("üöÄ Executing...")
                print("-" * 30)
            
            output = self.interpreter.interpret(ast)
            
            if show_details:
                print("-" * 30)
                print("‚úÖ Execution completed!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                variables = self.interpreter.get_variables()
                if variables:
                    print("\nüìä Final variables:")
                    for name, value in variables.items():
                        print(f"   {name} = {value} ({type(value).__name__})")
            
            return output
            
        except LexerError as e:
            error_msg = f"‚ùå Lexer error: {e}"
            print(error_msg)
            return [error_msg]
            
        except ParseError as e:
            error_msg = f"‚ùå Parse error: {e}"
            print(error_msg)
            return [error_msg]
            
        except DoroRuntimeError as e:
            error_msg = f"‚ùå Runtime error: {e}"
            print(error_msg)
            return [error_msg]
            
        except Exception as e:
            error_msg = f"‚ùå Unexpected error: {e}"
            print(error_msg)
            return [error_msg]
    
    def run_interactive(self) -> None:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (REPL - Read-Eval-Print Loop)
        """
        print("=" * 60)
        print(f"üéâ DoroLang Interactive Mode v{self.version}")
        print("   Created by Dorofii Karnaukh")
        print("-" * 60)
        print("Commands:")
        print("  Type DoroLang code and press Enter to execute")
        print("  'exit' or 'quit' - –≤—ã–π—Ç–∏")
        print("  'vars' - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        print("  'clear' - –æ—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        print("  'help' - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
        print("=" * 60)
        
        while True:
            try:
                line = input("DoroLang> ").strip()
                
                # –ö–æ–º–∞–Ω–¥—ã
                if line.lower() in ['exit', 'quit']:
                    print("üëã Goodbye!")
                    break
                    
                elif line.lower() == 'vars':
                    variables = self.interpreter.get_variables()
                    if variables:
                        print("üìä Variables:")
                        for name, value in variables.items():
                            print(f"   {name} = {value} ({type(value).__name__})")
                    else:
                        print("üìä No variables defined")
                    continue
                    
                elif line.lower() == 'clear':
                    self.interpreter.reset()
                    print("üßπ Variables cleared")
                    continue
                    
                elif line.lower() == 'help':
                    print("DoroLang syntax:")
                    print("  say \"text\"        - print text")
                    print("  kas var = value    - assign variable")
                    print("  Operators: +, -, *, /, %")
                    print("  Parentheses: (expression)")
                    print("  Unary: -x, +x")
                    continue
                    
                elif not line:
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
                self.run(line, show_details=False)
                
            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                break
            except EOFError:
                print("\nüëã Goodbye!")
                break
    
    def run_file(self, filepath: str) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–π–ª DoroLang
        
        Args:
            filepath: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        """
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                code = f.read()
            
            print(f"üöÄ Running file: {filepath}")
            print("-" * 50)
            
            self.run(code, show_details=True)
            
        except FileNotFoundError:
            print(f"‚ùå File not found: {filepath}")
        except Exception as e:
            print(f"‚ùå Error reading file: {e}")


def run_examples() -> None:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π DoroLang"""
    
    examples = [
        ("Hello World", '''
say "Hello, DoroLang!"
say "Created by Dorofii Karnaukh"
        '''),
        
        ("Variables and Arithmetic", '''
kas name = "DoroLang"
kas version = 1.0
say "Language: " + name
say "Version: " + version

kas a = 10
kas b = 3
say "a = " + a + ", b = " + b
say "a + b = " + (a + b)
say "a - b = " + (a - b)
say "a * b = " + (a * b)
say "a / b = " + (a / b)
say "a % b = " + (a % b)
        '''),
        
        ("Unary Operations", '''
kas positive = 42
kas negative = -positive
kas double_negative = -negative

say "positive = " + positive
say "negative = " + negative
say "double negative = " + double_negative
say "unary plus = " + (+positive)
        '''),
        
        ("Complex Expressions", '''
kas x = 5
kas y = 3
kas z = 2

say "Simple: " + (x + y)
say "With precedence: " + (x + y * z)
say "With parentheses: " + ((x + y) * z)
say "Complex: " + (-(x + y) * z % (x - y))
say "Very complex: " + (-((x + y) * z) + (x % y))
        '''),
        
        ("String Operations", '''
kas first_name = "Dorofii"
kas last_name = "Karnaukh"
kas full_name = first_name + " " + last_name

say "First name: " + first_name
say "Last name: " + last_name  
say "Full name: " + full_name

kas age = 25
say full_name + " is " + age + " years old"
        '''),
        
        ("Mixed Types", '''
kas pi = 3.14159
kas radius = 5
kas area = pi * radius * radius

say "Pi = " + pi
say "Radius = " + radius
say "Area = " + area

kas message = "The area of circle with radius " + radius + " is " + area
say message
        ''')
    ]
    
    dorolang = DoroLang()
    
    for title, code in examples:
        print("\n" + "=" * 70)
        print(f"üìù Example: {title}")
        print("=" * 70)
        print("Source code:")
        print(code.strip())
        print(f"\nüöÄ Output:")
        print("-" * 40)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        dorolang.interpreter.reset()
        dorolang.run(code.strip(), show_details=False)
        
        print("-" * 40)


def show_usage() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print(f"DoroLang Programming Language Interpreter")
    print("Created by Dorofii Karnaukh")
    print()
    print("Usage:")
    print("  python main.py                    # Run examples")
    print("  python main.py interactive        # Interactive mode (REPL)")
    print("  python main.py examples           # Show all examples")
    print("  python main.py test              # Run tests")
    print("  python main.py <file.doro>        # Execute DoroLang file")
    print()
    print("DoroLang Features:")
    print("  ‚úÖ Variables (kas x = value)")
    print("  ‚úÖ Print statements (say expression)")
    print("  ‚úÖ Arithmetic (+, -, *, /, %)")
    print("  ‚úÖ Unary operations (-x, +x)")
    print("  ‚úÖ Parentheses for precedence")
    print("  ‚úÖ String concatenation")
    print("  ‚úÖ Mixed type operations")
    print("  ‚úÖ Comments (# comment)")


def run_tests() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã DoroLang"""
    print("üß™ Running DoroLang tests...")
    print("=" * 50)
    
    dorolang = DoroLang()
    
    tests = [
        ("Basic arithmetic", 'kas x = 2 + 3 * 4\nsay x'),
        ("Parentheses", 'kas x = (2 + 3) * 4\nsay x'),
        ("Unary minus", 'kas x = -5\nsay x'),
        ("Modulo", 'kas x = 17 % 5\nsay x'),
        ("String concat", 'say "Hello, " + "World!"'),
        ("Mixed types", 'say "Result: " + (2 + 3)'),
        ("Complex expression", 'kas x = -(2 + 3) * 4 % 7\nsay x'),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, code in tests:
        try:
            print(f"\nüß™ Test: {name}")
            print(f"   Code: {code.replace(chr(10), '; ')}")
            
            dorolang.interpreter.reset()
            output = dorolang.run(code, show_details=False)
            
            if output and not any("‚ùå" in line for line in output):
                print(f"   ‚úÖ PASSED")
                passed += 1
            else:
                print(f"   ‚ùå FAILED")
                
        except Exception as e:
            print(f"   ‚ùå ERROR: {e}")
    
    print(f"\n{'='*50}")
    print(f"üìä Test Results: {passed}/{total} passed")
    
    if passed == total:
        print("üéâ All tests passed!")
    else:
        print(f"‚ùå {total - passed} tests failed")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) == 1:
        # –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print("üéâ DoroLang Programming Language")
        run_examples()
        print("\n" + "=" * 70)
        show_usage()
        
    elif len(sys.argv) == 2:
        arg = sys.argv[1].lower()
        
        if arg == "interactive":
            dorolang = DoroLang()
            dorolang.run_interactive()
            
        elif arg == "examples":
            run_examples()
            
        elif arg == "test":
            run_tests()
            
        elif arg in ["help", "--help", "-h"]:
            show_usage()
            
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª
            if os.path.exists(sys.argv[1]):
                dorolang = DoroLang()
                dorolang.run_file(sys.argv[1])
            else:
                print(f"‚ùå File not found: {sys.argv[1]}")
                print("Use 'python main.py help' for usage information")
    else:
        print("‚ùå Too many arguments")
        show_usage()


if __name__ == "__main__":
    main()